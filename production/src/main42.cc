// main42.cc is a part of the PYTHIA event generator.
// Copyright (C) 2017 Torbjorn Sjostrand.
// PYTHIA is licenced under the GNU GPL version 2, see COPYING for details.
// Please respect the MCnet Guidelines, see GUIDELINES for details.

// Author: Mikhail Kirsanov, Mikhail.Kirsanov@cern.ch.
// This program illustrates how a file with HepMC events
// can be generated by Pythia8.
// Input and output files are specified on the command line, e.g. like
// ./main42.exe main42.cmnd hepmcout42.dat > out
// The main program contains no analysis; this is intended to happen later.
// It therefore "never" has to be recompiled to handle different tasks.

// WARNING: typically one needs 25 MB/100 events at the LHC.
// Therefore large event samples may be impractical.

#include "/tier2/home/groups/rhi/STAR/software/pythia8/include/Pythia8/Pythia.h"
#include "/tier2/home/groups/rhi/STAR/software/pythia8/include/Pythia8Plugins/HepMC2.h"

using namespace Pythia8;

int main(int argc, char* argv[]) {

  // Check that correct number of command-line arguments
  if (argc != 4) {
    cerr << " Unexpected number of command-line arguments. \n You are"
         << " expected to provide one input and one output file name. \n"
         << " Program stopped! " << endl;
    return 1;
  }

  // Check that the provided input name corresponds to an existing file.
  ifstream is(argv[1]);
  if (!is) {
    cerr << " Command-line file " << argv[1] << " was not found. \n"
         << " Program stopped! " << endl;
    return 1;
  }

  // Confirm that external files will be used for input and output.
  cout << "\n >>> PYTHIA settings will be read from file " << argv[1]
       << " <<< \n >>> HepMC events will be written to file "
       << argv[2] << " <<< \n" << endl;

  // Interface for conversion from Pythia8::Event to HepMC event.
  HepMC::Pythia8ToHepMC ToHepMC;

  // Specify file where HepMC events will be stored.
  HepMC::IO_GenEvent ascii_io(argv[2], std::ios::out);

  // Generator.
  Pythia pythia;

  // Read in commands from external file.
  pythia.readFile(argv[1]);

  // Extract settings to be used in the main program.
  int    nEvent    = pythia.mode("Main:numberOfEvents");
  int    nAbort    = pythia.mode("Main:timesAllowErrors");

  std::string decay_switch;
  if (strcmp(argv[3],"off") == 0) {cout << "Decays off!" << endl; decay_switch = "0";}
  else if (strcmp(argv[3],"on") == 0) {cout << "Decays on!" << endl; decay_switch = "1";}
  else {cerr << "Didn't receive a decay setting. Was given argument: " << argv[3] << ". Exiting." << endl; exit(1);}

  double seed = pythia.parm("PhaseSpace:pTHatMin");
  std::ostringstream sstream; sstream << seed; std::string seedstring = sstream.str();

  //cout << seedstring << endl;
  /*
  pythia.readString("Random:setSeed = on");                                                 
  pythia.readString(("Random:seed = " + seedstring).c_str()); //seed needs to change if looping over multiple pT hard-bins
  */
  pythia.readString(("111:mayDecay = " + decay_switch).c_str()); //pi0                                                               
  pythia.readString(("211:mayDecay = " + decay_switch).c_str()); //pi+                                                             
  pythia.readString(("221:mayDecay = " + decay_switch).c_str()); //eta                                                           
  pythia.readString(("321:mayDecay = " + decay_switch).c_str()); //K+                                                             
  pythia.readString(("310:mayDecay = " + decay_switch).c_str()); //Kshort                                                          
  pythia.readString(("130:mayDecay = " + decay_switch).c_str()); //Klong                                                      
  pythia.readString(("3122:mayDecay = " + decay_switch).c_str());//Lambda0                                                           
  pythia.readString(("3212:mayDecay = " + decay_switch).c_str());//Sigma0                                                            
  pythia.readString(("3112:mayDecay = " + decay_switch).c_str());//Sigma-                                                           
  pythia.readString(("3222:mayDecay = " + decay_switch).c_str());//Sigma+                                                            
  pythia.readString(("3312:mayDecay = " + decay_switch).c_str());//Xi-                                                              
  pythia.readString(("3322:mayDecay = " + decay_switch).c_str());//Xi0                                                              
  pythia.readString(("3334:mayDecay = " + decay_switch).c_str());//Omega-  

  // Initialization.
  pythia.init();

  // Begin event loop.
  int iAbort = 0;
  int iTrigs = 0;
  for (int iEvent = 0; iEvent < nEvent; ++iEvent) {

    // Generate event.
    if (!pythia.next()) {

      // If failure because reached end of file then exit event loop.
      if (pythia.info.atEndOfFile()) {
        cout << " Aborted since reached end of Les Houches Event File\n";
        break;
      }
      
      // First few failures write off as "acceptable" errors, then quit.
      if (++iAbort < nAbort) continue;
      cout << " Event generation aborted prematurely, owing to error!\n";
      break;
      
    }
    
    //cout << pythia.info.pTHat() << endl;
    
    /*  
    bool has_trig = 0;
    for (int i = 0; i < pythia.event.size(); ++ i) {
      //if it's a final-state pi0 with >= 5.4 GeV in the desired eta range, it's a trigger
      if (pythia.event[i].id() == 111 && pythia.event[i].pT() > 5.4 && fabs(pythia.event[i].eta()) < 1) {
	has_trig = 1;
      }
    }
    if (!has_trig) {continue;} else {++ iTrigs;}
*/
    // Construct new empty HepMC event and fill it.
    // Units will be as chosen for HepMC build, but can be changed
    // by arguments, e.g. GenEvt( HepMC::Units::GEV, HepMC::Units::MM)
    HepMC::GenEvent* hepmcevt = new HepMC::GenEvent();
    ToHepMC.fill_next_event( pythia, hepmcevt );

    // Write the HepMC event to file. Done with it.
    ascii_io << hepmcevt;
    delete hepmcevt;

  // End of event loop. Statistics.
  }
  pythia.stat();
  std::cout << "There were " << iTrigs << " trigger events." << std::endl;

  // Done.
  return 0;
}
